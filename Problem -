#include <bits/stdc++.h>
using namespace std;
// global
vector<vector<int> > g(200005);
map<int , int> tel;
vector<int> res , dom(200005);  // number of nodes after under my control including me
// end
// functions
int dfs(int s)
{
  res.push_back(s);
  tel[s]=res.size()-1;
  for(int i=0; i<g[s].size(); i++)
  {
    int child=g[s][i];
    dom[s]+=dfs(child);
  }
  dom[s]+=1;
  return max(dom[s] , 1);
}
// end
int main()
{
  int n , q;
  cin>>n>>q;
  for(int i=2; i<=n; i++){ // build directed graph
    int dad;
    cin>>dad;
    g[dad].push_back(i); // dad is dad of node i
  }
  dfs(1);
  for(int i=0; i<q; i++)
  {
    int boss , index;
    cin>>boss>>index;
    if(index==1)
    cout<<boss<< endl;
    else {
      index=(index-1)+tel[boss];
      //cout<<boss<<" "<<index<<" "<<res[index]<<" "<<boss<< endl;
      if(index<res.size() && index-tel[boss]<=dom[boss]-1)
      cout<<res[index]<< endl;
      else
        cout<<-1<< endl;
    }
  }
  return 0;
}
