class Solution {
public:
    bool stoneGame(vector<int>& piles) {
        int n = piles.size();
        int sum = 0;
        
        int dp[500][500][2];  // faster than dynamic allocation
        
        /*int ***dp = new int**[n];
        for(int i=0; i<n; i++){
            dp[i] = new int *[n];
            for(int j=0; j<n; j++)
                dp[i][j] = new int[2];
            sum +=piles[i];
        }*/
        
        /*
        // testing the 3d dynamic allocation
        dp[2][2][1] = 1212;
        cout<<dp[2][2][1]<<endl;
        */
        
        for(int i=n-1; i>=0; i--) // left start 
        {
            sum += piles[i];
            for(int j=0; j<n; j++) // right start 
            {
                for(int r=0; r<=1; r++)
                { // role
                    // we have not necessary calculation 
                    if(i>j) // base case
                        dp[i][j][r] = 0; 
                    else if(r==0) // alex 
                    {
                        int tl = piles[i];
                        if(i+1 <n)
                            tl += dp[i+1][j][1];
                        int tr = piles[j];
                        if(j-1 >=0)
                            tr +=dp[i][j-1][1];
                        dp[i][j][r] = max(tl , tr);
                    }
                    else{
                        int tl = 0;
                        if(i+1 <n)
                            tl +=dp[i+1][j][0];
                        int tr = 0;
                        if(j-1 >=0)
                            tr +=dp[i][j-1][0];
                        dp[i][j][r] = min(tl, tr);
                    }
                }
            }
        }
        if(dp[0][n-1][0] > sum - dp[0][n-1][0])
            return 1;
        return 0;
    }
};  
