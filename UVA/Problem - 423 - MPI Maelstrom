/* explanation 
the processor can send for all other processors at the same time 
and he want to get the min time to send to all processors 
so we get the minimum time for each (n-1) processor  from the 1st processor 
then the max of them is our answer 
cuz the comminaction will wait until longest operation done to say that we have finished our commination 
*/

#include <bits/stdc++.h>
using namespace std;
#define pi pair<int , int>
#define oo 1e7
int  g[105][105];

int main()
{
    int n;
    cin>>n;
    int w=1;
    // build the graph
    // 1- based
    for(int i=2; i<=n; i++ , w++)
        for(int j=1; j<=w; j++){
            string tmp;
            cin>>tmp;
            if(tmp=="x"){
                g[i][j]=g[j][i]=oo;
                continue;
            }
            stringstream s;
            int num;
            s<<tmp;
            s>>num;
            // un directed graph
            g[i][j]=g[j][i]=num;
        }
    /*cout<< endl;
    for(int i=1; i<=n; i++){
        for(int j=1; j<=n; j++)
            cout<<g[i][j]<<" ";
        cout<< endl;
    }
    cout<< endl;*/
    // apply Dj
    priority_queue<pi , vector<pi> , greater<pi> > q;  // cost , node
    int dis[105];
    for(int i=0; i<=n; i++)
        dis[i]=oo;
    dis[1]=0;
    q.push({0 , 1}); // hit a start
    while(!q.empty())
    {
        // pick closest
        int node=q.top().second;
        int w=q.top().first;
        // delete the node
        q.pop();
        // pruning
        if(w>dis[node]) //  we had a better one
            continue;
        // build new edges
        for(int i=1; i<=n; i++) //  go throw g[node][i];
        {
            // i is the child it self
            if(dis[i]>dis[node]+g[node][i]){
                dis[i]=dis[node]+g[node][i];
                q.push({dis[i] , i}); // relax from it
            }
            // else continue;
        }
    }

    int sum=0;
    //cout<<endl;
    for(int i=1; i<=n; i++){
        //cout<<dis[i]<<" ";
        sum=max(sum , dis[i]);
    }
    cout<<sum<< endl;
    return 0;
}
