#include <bits/stdc++.h>
using namespace std;
const int sz=100;
int z[sz];
void z_fun(string s)
{
    int n=(int)s.size();
    int l=0 , r=0;
    for(int i=1; i<n; i++)
    {
        int j=0;
        if(i<=r){
            j=min(z[i-l] , r-i+1);
            z[i]=j;
        }
        for(; j<n && i+j<n; j++){
            if(s[j]!=s[i+j]) break;
            ++z[i];
        }
        if(z[i]+i-1>=r){
            l=i;
            r=z[i]+i-1;
        }
    }
    return ;
}
int main()
{
	//freopen("input.txt" ,"r" , stdin);
	//freopen("output.txt" , "w", stdout);
    int n;
    cin>>n;
    for(int i=0; i<n; i++){
        string s;
        vector<int> v;
        //cin.ignore();
        cin>>s;
        int len=(int)s.size();
        z_fun(s);

        /*for(int i=0; i<len; i++)
            cout<<z[i]<<" ";
        cout<< endl;*/

        int mini=len;
        for(int i=1; i<len; i++)
            if(z[i]!=0)
            v.push_back(z[i]);
        sort(v.begin() , v.end());

        for(int i=0; i<(int)v.size(); i++){
            int p=v[i];
            //cout<<p<< endl;
            int index=lower_bound(v.begin() , v.end() , p)-v.begin();
            int num=(int)v.size()-index+1;
            if(num*p==len){
                mini=p;
                break;
            }
        }
        cout<<mini<< endl;
        if(i+1!=n) cout<< endl;
        // reinitialize
        for(int i=0; i<sz; i++)
            z[i]=0;
    }
    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// above idea is very beautiful and different from the bellow one and is originally mine  
#include <bits/stdc++.h>
using namespace std;
const int sz=100005;
int z[sz];
void z_algo(string &s)
{
    int l=0 , r=0;
    int n=(int)s.size();
    for(int i=1; i<n; i++)
    {
        // smart use of what I did matched before (slide)
        if(i<=r)
            z[i]=min(z[i-l] , r-i+1); // length
        // brute force  , match from i with the prefix of the original string
        for(int j=z[i]; i+j<n && s[j]==s[i+j]; ++j)  // index
        ++z[i];
        // update the slide  so I can make use of it for next i's
        if(z[i]+i-1>r){
            l=i;
            r=z[i]+i-1;
        }
    }
    return;
}
int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        string s;
        cin>>s;
        z_algo(s);
        /*  // test
        for(int i=0; i<s.size(); i++)
            cout<<z[i]<<" ";
        cout<< endl;
        */
        int mini=s.size();
        for(int i=1; i<(int)s.size(); i++)
            // take care of ababa
            if(z[i]+i==s.size() && z[i]%i==0){
                mini=i;
                break;
            }
        cout<<mini<< endl;
        // reinitialize
        for(int i=0; i<=s.size(); i++)
            z[i]=0;
        if(n) cout<<endl;
    }
    return 0;
}

