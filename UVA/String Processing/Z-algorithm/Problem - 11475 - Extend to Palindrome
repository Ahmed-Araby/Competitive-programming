/*
-  I solved one like this in spoj 
- idea is to try to bring the longest palindrome  
that end in the end of the given string 
so that I can ignore it and solve another  subproblem 
*/
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;
const int sz = 1000005 * 2;
int z[sz];
void z_fun(string s, int z[])
{
	int l = 0, r = 0;
	for (int i = 1; i <= s.size(); i++) 
	{
		// smart use of prvious match 
		if (i <= r)
			z[i] = min(z[i - l], r - i + 1); // length 

		// brute force 
		for (int j = z[i]; j < s.size() && j + i < s.size(); j++)
		{
			if (s[j] == s[i + j])
				z[i]++;
			else
				break;
		}

		if (i + z[i] - 1 > r) { // edit explored range 
			l = i;
			r = i + z[i] - 1;
		}
	}
	return;
}
int main()
{
	string s;
	while (cin >> s)
	{
		string tmp = s;
		reverse(tmp.begin(), tmp.end());

		z_fun(tmp+"*"+s, z);

		int maxi = -1;
		for (int i = s.size() + 1; i <= 2 * s.size(); i++)
			if (i + z[i] == 2 * s.size() + 1) {
				maxi = z[i];
				break;
			}
		int need = s.size() - maxi;
		tmp = "";
		for (int i = 0; i < need; i++)
			tmp += s[i];
		reverse(tmp.begin(), tmp.end());
		cout << s + tmp << endl;

		// reinitialize 
		for (int i = 0; i <= 2 * s.size(); i++)
			z[i] = 0;
	}
	return 0;
}
