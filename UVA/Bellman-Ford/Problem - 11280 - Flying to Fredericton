// K-length bellman ford (modified bellman ford )  , look MIT assignment 6 solution
#include <bits/stdc++.h>
#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#define so "Calgary"
#define de "Fredericton"
using namespace std;
int main()
{
	int test, c = 1;
	cin >> test;
	while (test--)
	{
		int ID = 1;
		map<string, int> id;
		//map<int, string> rid;
		int n;
		cin >> n;
		int s, d;
		for (int i = 0; i<n; i++)
		{
			string node;
			cin >> node;
			id[node] = ID++;
			if (node == "Calgary")
				s = id[node];
			else if (node == "Fredericton")
				d = id[node];
		}
		int m;
		cin >> m;
		vector<vector<pair<int, int> > > g(105);
		for (int i = 0; i<m; i++)
		{
			string f, t;
			int c;
			cin >> f >> t >> c;
			int fid, tid;
			fid = id[f];
			tid = id[t];
			// edge in reverse direction 
			g[tid].push_back({ fid , c });
		}
		// run tabe method of bellman ford 
		int dp[105][105];
		int inf = INT_MAX;
		for (int j = 0; j <n; j++)  // number of available edges - 0 is base case then 1->n-1 included is n-1 iteration 
		{
			for (int i = 1; i <= n; i++) // nodes 
			{
				// base case 
				if (i == s)
					dp[i][j] = 0;
				else if (j == 0)
					dp[i][j] = inf;
				else {
					// we don't need to assign for previous cuz of the modified base case 
					dp[i][j] = inf;
					for (int k = 0; k < g[i].size(); k++)
					{
						int f, c;
						f = g[i][k].first;
						c = g[i][k].second;
						if (dp[f][j - 1] != inf)
							dp[i][j] = min(dp[i][j], dp[f][j - 1] + c);
					}
				}
			}
		}
		int q;
		cin >> q;
		cout << "Scenario #" << c++ << endl;
		while (q--)
		{
			int l;
			cin >> l;
			l++;
			l = min(l, n - 1);  // very big catch maximum number of stopovers could be more than the number of nodes it slef 
			int res = dp[d][l];
			if (res == inf)
				cout << "No satisfactory flights" << endl;
			else
				cout << "Total cost of flight(s) is " << "$" << res << endl;
		}
			if (test != 0)
			cout << endl;
	}
	return 0;
}
