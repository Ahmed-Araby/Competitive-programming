// Accepted solution cuz the cycle detection here obay to the constrains of the player life 
// but I still don't know the right and safe number of iterations to get all the affected nodes by the +ve cycles !!!??? 
// ->> n work , 1 work , n-1 work in the video of mostafa sadd he saied that he is not sure with just 1 iteration
#include <iostream>
#include <vector>
#include <algorithm>
#define inf 20005
using namespace std;
struct edge
{
	int f , t , c;
	edge() {}
	edge(int ff, int tt, int cc)
	{
		f = ff;
		t = tt;
		c = cc;
	}
};
int main()
{
	int n;
	while (cin >> n  && n != -1)
	{
		// build the graph 
		vector<edge> ed;
		for (int i = 1; i <= n; i++)
		{
			int e, o , to;
			cin >> e >> o;

			/*
			if (i == 1)
				e = 100;
			*/

			for (int j = 0; j < o; j++)
			{
				cin >> to;	
				ed.push_back(edge(i, to, e));  // energy of the i room 
			}
		}
		// apply bellman ford searching for max path 
		// initialize 
		int dis[105] , dis2[105];
		for (int i = 0; i <= n; i++)
			dis[i]=dis2[i]= -inf;
		dis[1] = 100;
		dis2[1] = 100;
		//int p[105];
		//p[1] = -1;
		// process	 
		for (int j = 1; j <n; j++)  // n-1 iterations max no. of edges 
		{
			for (int i = 0; i < ed.size(); i++)
			{
				int f = ed[i].f, t = ed[i].t, c = ed[i].c;
				// relax if possible 
				if (dis[f] > 0) { // reachable && still alive 
					dis[t] = max(dis[t], dis[f] + c);
					dis2[t] = dis[t];
					//p[t] = f;
				}
			}
			if (dis[n]>0)  // 100 as the player begin with 
				break;
		}
		if (dis[n]>0)
			cout << "winnable" << endl;
		else
		{
			bool ok = 1;
			for (int k = 0; k < 2 && ok; k++) {
				for (int j = 1; j <=n; j++)  // this way we gernate that we did full go in all +ve cycles have to be n iteerations not n-1 cuz 
					for (int i = 0; i < ed.size(); i++)
					{
						int f = ed[i].f, t = ed[i].t, c = ed[i].c;
						if (dis2[f] > 0)
							dis2[t] = max(dis2[t], dis2[f] + c);
					}
				ok = 0;
				for (int i = 1; i <= n; i++)
					if (dis2[i] > dis[i]) {  // nodes lying in a +ve cycle 
						ok = 1;
						dis2[i] = inf;
					}
				// second iteration to edit n if it's no in cycle but reachable 
			}
			if(dis2[n]>0)
				cout << "winnable" << endl;
			else
			cout << "hopeless" << endl;
		}
	}
	return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// this solution give me wrong answer 
// cuz applying dfs to detect the affected nodes by the +ve cycle by knowing some of them as a prerequest by the iteration number n 
// don't obay for the problem constrains other wise it could work fine 
#include <bits/stdc++.h>
#include <vector>
#include <algorithm>
#define inf 20005
using namespace std;
struct edge
{
	int f , t , c;
	edge() {}
	edge(int ff, int tt, int cc)
	{
		f = ff;
		t = tt;
		c = cc;
	}
};
int main()
{
    //freopen("input.txt" , "r"  , stdin);
    //freopen("output.txt" , "w" , stdout);
	int n;
	while (cin >> n  && n != -1)
	{
		// build the graph
		vector<edge> ed;
		vector<vector<int> > g(105);
		for (int i = 1; i <= n; i++)
		{
			int e, o , to;
			cin >> e >> o;
			/*
			if (i == 1)
				e = 100;
			*/

			for (int j = 0; j < o; j++)
			{
				cin >> to;
				g[i].push_back(to);
				ed.push_back(edge(i, to, e));  // energy of the i room
			}
		}
		// apply bellman ford searching for max path
		// initialize
		int dis[105];
		for (int i = 0; i <= n; i++)
			dis[i]=-inf;
		dis[1] = 100;
		//int p[105];
		//p[1] = -1;
		// process
		queue<int> q;
		for (int j = 1; j <=n; j++)  // n-1 iterations max no. of edges
		{
			for (int i = 0; i < ed.size(); i++)
			{
				int f = ed[i].f, t = ed[i].t, c = ed[i].c;
				// relax if possible
				if (dis[f] > 0) { // reachable && still alive
					dis[t] = max(dis[t], dis[f] + c);
					if(j==n)
                        q.push(t); // node affected by a +cycle
				}
			}
			if (dis[n]>0)  // 100 as the player begin with
				break;
		}
		//cout<< endl<< endl << endl;
		// apply bfs on the affected nodes
		while(!q.empty())   // if a +ve loop that have big -ve value as intermediate it is not a valid cycle cuz the player die in the middle of the game in it
        {
            // so the better solution is to bring the affected nodes respect to the constrains that we put of the game
            int node=q.front();
            //cout<<"node   "<<node<< endl;
            q.pop();
            for(int i=0; i<g[node].size(); i++)
            {
                int child=g[node][i];
                if(dis[child]==inf)  // mean we relaxed it  or we have it in the queue
                    continue;
                // else
                dis[child]=inf;
                q.push(child); // relax on his childes
            }
        }

		if (dis[n]>0)
			cout << "winnable" << endl;
        else
        cout<<"hopeless"<< endl;
	}
	return 0;
}
// test case 

// case of wrong answer for the second sol
5
0 1 2
-60 1 3
-50 2 5 4
100 1 3
0 0

// ordinary case that illistrate the need for detecting the cycle by the ability to go more than once throw a +cycle that the player 
// do not die in any stage of it 
5
0 3 3 4 2
1 1 1
-100 1 5
-100 1 5
0 0













