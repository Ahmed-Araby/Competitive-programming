/*
top-down approach 
I take decision for each step and choose the best 
*/
#include <bits/stdc++.h>
using namespace std;
#define pi pair<int , int>
int tt[2];
pi mem[100000];
pi solve(int rem)
{
    // base case
    if(rem==0)
        return {0 , 0};

    // overlapping
    if(mem[rem].first!=-1)
        return mem[rem];

    // divide and conquer
    pi tmp;
    pi mm=make_pair(0 , rem) , nn=make_pair(0 , rem);
    bool ok=0;
    if(rem>=tt[0]){
        tmp=solve(rem-tt[0]);
        tmp.first+=1;
        mm=tmp;
        ok=1;
    }
    if(rem>=tt[1]){
        tmp=solve(rem-tt[1]);
        tmp.first+=1;
        nn=tmp;
        ok=1;
    }
    if(!ok)
    return {0 , rem};

    if(mm.second==0 && nn.second==0)
        return mem[rem]=(mm.first>nn.first?mm:nn);
    else if(mm.second==0)
        return mem[rem]=mm;
    else if(nn.second==0)
        return mem[rem]=nn;
    else {
    if(mm.second!=nn.second)
    return mem[rem]=(mm.second<nn.second?mm:nn);
    else
    return mem[rem]=(mm.first>nn.first?mm:nn);
    }
}
int main()
{
    //freopen("input.txt" , "r" , stdin);
    //freopen("output.txt" , "w" , stdout);
    int n , m , t;
    while(cin>>m>>n>>t)
    {
        for(int i=0; i<100001; i++)
        mem[i].first=-1;

        tt[0]=m;
        tt[1]=n;
        pi res=solve(t);
        cout<<res.first;
        if(res.second!=0)
            cout<<" "<<res.second;
        cout<< endl;
    }
    return 0;
}



// dp (Table Method)

#include <bits/stdc++.h>
using namespace std;
#define pi pair<int , int>
int main()
{
    int n , m , t;
    while(cin>>n>>m>>t)
    {
        pi dp[100005];
        // base case
        // I is remaning time
        for(int i=0; i<=t; i++)
        {
            //cout<<i<< endl;
            // base case
            if(i==0)
            dp[i]={0 , 0};

            // do all you possible choices

            /*
             pi tmp={dp[i-1].first , i}; // in case no possible choice
             it just happens in case of very small time and I will not have any possible
             choices before me cuz thay are smaller than me
             */
            pi mm=make_pair(0 , i) , nn=make_pair(0 , i); // for comparison
            bool ok=0;
            if(i>=m)
            {
                mm=dp[i-m];
                mm.first++;
                ok=1;
            }
            if(i>=n)
            {
                nn=dp[i-n];
                nn.first++;
                ok=1;
            }
            if(!ok)// no possible choice
            {
                dp[i]={0 , i}; // can`t take any decision
                continue;
            }
            // Take the best decision
            if(mm.second==nn.second)
                dp[i]=(mm.first>nn.first?mm:nn);
            else if(mm.second==0 || mm.second<nn.second)
                dp[i]=mm;
            else if(nn.second==0 || nn.second<mm.second)
                dp[i]=nn;
        }
        cout<<dp[t].first;
        if(dp[t].second!=0)
            cout<<" "<<dp[t].second;
        cout<< endl;
    }
    return 0;
}

