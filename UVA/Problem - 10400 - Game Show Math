// top-down (recursion)
/*
here we need additional container to store the solution that he want 
cuz the mem conainer store things that is not used in the solution extraction 
so different 
other problems could be solved like that also 
and could have some process in the same mem container to extract the solution from it without extra container 
*/
#include <bits/stdc++.h>
using namespace std;
char path[105];
int n , r;
map<pair<int , int> , bool> mem;
//bool mem[105][350000]; // index , result
int p[105]={0};
bool solve(int index , int res)
{

    // base case
    if(res==r && index==n)  // we didn't missed any elements
    return 1;

    else if(index==n || res<-32000 || res>32000)
    return 0;
    if(mem[{index , res}])
        return 0;
    /*
    take decisions  4 at a time
    operator between you and the previous one
    */
    path[index]='+';
    if(solve(index+1 , res+p[index]))
        return 1;
    path[index]='-';
    if(solve(index+1 , res-p[index]))
        return 1;
    path[index]='*';
    if(solve(index+1 , res*p[index]))
        return 1;
    if(res%p[index]==0)  // divisible
    {
        path[index]='/';
        if(solve(index+1 , res/p[index]))
            return 1;
    }
    mem[{index , res}]=1; // don`t come here a gain
    return 0;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        mem.clear();
        cin>>n;
        for(int i=0; i<n; i++)
            cin>>p[i];
        cin>>r;
        if(solve(1 , p[0]))
        {
            for(int i=1; i<n; i++)
                cout<<p[i-1]<<path[i];
            cout<<p[n-1]<<"="<<r<< endl;
        }
        else
        cout<<"NO EXPRESSION"<< endl;
    }
    return 0;
}
