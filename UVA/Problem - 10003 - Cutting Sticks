// slow recursive solution (not like table method)
#include <bits/stdc++.h>
using namespace std;
#define ll long long
// global
int arr[55]={0} , mem[1005][1005];  // start , end   of the pieces 
//bool vis[55]={0};
int n;
// end
int solve(int s , int e)
{
    //cout<<s<<" "<<e<< endl;
    // base case is having all visited or for loops finished
    // DP case
    int &ret=mem[s][e];
    if(ret!=-1)
        return ret;
    // go throw cuts
    ll cut=1e9;
    for(int i=0; i<n; i++)
    {
        //cout<<"here"<< endl;
        if(arr[i]>s && arr[i]<e)  // cut is suitable for just one piece
        {
            //cout<<"here2"<< endl;
            // try
            //vis[i]=1; // mark
            int cost=e-s , index=arr[i];
            cut=min(cut , (ll)(cost+solve(s , index)+solve(index , e)));
            //cout<<cut<< endl;
            // back track
            //vis[i]=0;
        }
    }
    //cout<<cut<< endl;
    if(cut==1e9)
        cut=0;
    return ret=cut;
}
int main()
{
    int l;
    while(cin>>l && l!=0)
    {
        // dp
        for(int i=0; i<1005; i++)
            for(int j=0; j<1005; j++)
            mem[i][j]=-1;
        // end
        cin>>n;
        for(int i=0; i<n; i++)
            cin>>arr[i];
        //cout<<solve(0 , l)<< endl;
        cout<<"The minimum cutting is "<<solve(0 , l)<<"."<< endl;
        // reinitialize
        // end
    }
}
// fast resursive solution (like table method)
#include <bits/stdc++.h>
using namespace std;
// now we mem the in dex of array of cutting not the segment it self
int cut[55] , mem[55][55];
int solve(int s , int e)
{
    // base case
    if(s+1==e) // so there is no possible cutting in the array (no edge cutting )
        // they may be far a way from each other as real segment indexes but we don`t have any cut index in between
        return 0;  // instead of INT_MAX that fuck the res up

    // dp case
    int &ret=mem[s][e];
    if(ret!=-1)
        return ret;

    // recursive case
    // no edge cutting
    int res=INT_MAX;
    for(int i=s+1; i<e; i++) // indexes of the cutting array
    {
        int cost=cut[e]-cut[s]; // actual segment length
        res=min(res , cost+solve(s , i)+solve(i , e));
    }
    return ret=res;
}
int main()
{
    int l;
    while(cin>>l && l!=0)
    {
        for(int i=0; i<55; i++)
            for(int j=0; j<55; j++)
            mem[i][j]=-1;
        int n;
        cin>>n;
        for(int i=1; i<=n; i++)
            cin>>cut[i];
        // help me in getting the cost and indicate my next possible cuts in between.
        cut[0]=0;
        cut[n+1]=l;
        // end
        // we work on indexes of the cutting array
        cout<<"The minimum cutting is "<<solve(0 , n+1)<<"."<< endl;
    }
    return 0;
}

// table method ISA




