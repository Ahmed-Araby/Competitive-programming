// recursive manner 
#include <bits/stdc++.h>
using namespace std;
#define ll long long
int coins[11]={10000 , 5000 , 2000 , 1000 , 500 , 200 , 100 , 50 , 20 , 10 , 5};
string cent;
ll mem[30005][12];
ll solve(int index , int rem)
{
    // base case
    if(rem==0)
    return 1;
    else if(index==11){
    return 0;
    }
    // dp case
    ll &ret=mem[rem][index];
    if(ret!=-1)
        return ret;
    // recursive case
    ll counter=0;

    //cout<<rem<<" "<<coins[index]<< endl;
    if(rem>=coins[index]){
    //cout<<"here"<< endl;
    counter=solve(index , rem-coins[index]);
    }
    counter+=solve(index+1 , rem);
    return ret=counter;
}
int main()
{
    for(int i=0; i<30005; i++)
        for(int j=0; j<12; j++)
        mem[i][j]=-1;
    while(cin>>cent && cent!="0.00")
    {
    int arr[2]={0} , p=0;
    for(int i=0; i<cent.size(); i++)
    {
        if(cent[i]=='.'){
            arr[p]*=100;
            p++;
            continue;
        }
        arr[p]=arr[p]*10+(cent[i]-'0');
    }
    ll res=solve(0 , arr[0]+arr[1]);
    cout<<setw(6)<<fixed<<setprecision(2)<<cent<<setw(17)<<res<< endl;
    }
    return 0;
}
// iterative manner 
#include <bits/stdc++.h>
using namespace std;
#define ll long long
int coins[11]={5 , 10 , 20 , 50 , 100 , 200 , 500 , 1000 , 2000 , 5000 ,10000};
ll dp[11][30005];
int main()
{
    // base case
    for(int i=0; i<11; i++)
        dp[i][0]=1;
    // build
    for(int i=5; i<30005; i+=5)
    {
        for(int j=0; j<11; j++)
        {
            if(j)
            dp[j][i]=dp[j-1][i];
            if(i>=coins[j])
            dp[j][i]+=dp[j][i-coins[j]];
        }
    }
    double cent;
    while(cin>>cent && cent!=0)
    {
        cent*=100;
        cout<<setw(6)<<fixed<<setprecision(2)<<cent/(double)100<<setw(17)<<dp[10][(int)(cent+.5)]<< endl;  // round up to avoid some issues 
    }
    return 0;
}

//iterative with rolling technique 

// dolars in rolling (iterative) 
#include <bits/stdc++.h>
using namespace std;
#define ld long double
#define ll long long
int coins[11]={10000 , 5000 , 2000 , 1000 , 500 , 200 , 100 , 50 , 20 , 10 , 5};
ld cent;
ll dp[2][30005]; // standard coins , remaning
int main()
{
  sort(coins , coins+11);  // to suit my counters movement
  // dp
  // base case
  bool p=0;
  for(int i=0; i<30005; i++)  // the second raw which will be the dynamic row for the firt raw whcih must not have dynamic row
  dp[1][i]=0;
  dp[0][0]=dp[1][0]=1; // will not ever change cuz j don`t go ever for 0
  for(int i=0; i<11; i++ , p=!p)  // hold standard coin
  {
    // base case
    //dp[p][0]=1; // remaning 0  with the base case
    for(int j=5; j<30005; j+=5)  // build the table
    {
      dp[p][j]=dp[!p][j]; // what happened before me for the previous standard coin
      if(j-coins[i]>=0)
      dp[p][j]+=dp[p][j-coins[i]]; // waht I`m able to get by subtract this coin from me
    }
  }
  while(cin>>cent && cent)
  {
    cent*=100;
    int tmp=int(cent+.5);
    cout<<setw(6)<<fixed<<setprecision(2)<<cent/100<<setw(17)<<dp[!p][tmp]<<endl;
  }
  return 0;
}
