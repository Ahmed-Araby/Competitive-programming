// Topic : Dp (Longest Common Subsequence)
// recursion solution 
#include <bits/stdc++.h>
using namespace std;
string a , b;
int mem[101][101];
int solve(int p1 , int p2)
{
    // base case
    if(p1==a.size() || p2==b.size())
        return 0;
    // dp case
    int &ret=mem[p1][p2];
    if(ret!=-1)
        return ret;
    // recursive case
    int m=0 , go1=0 , go2=0;
    if(a[p1]==b[p2])
        m=1+solve(p1+1 , p2+1);
    // move p1;
    go1=solve(p1+1 , p2);
    // move p2;
    go2=solve(p1 , p2+1);
    return ret=max(m , max(go1 , go2));
}
int main()
{
    //freopen("input.txt" , "r" , stdin);
    //freopen("output.txt" , "w" , stdout);
    int c=1;
    while(getline(cin , a) && a!="#")
    {
        //cin.ignore();  // no need
        getline(cin , b);
        for(int i=0; i<=100; i++)
        for(int j=0; j<=100; j++)
            mem[i][j]=-1;

        cout<<"Case #"<<c++<<": you can visit at most "<<solve(0 , 0)<<" cities."<< endl;
    }
    return 0;
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
/*
iterative solution
are we able to solve it using rolling 
I don`t think so cuz it depends on data in both row and column 
*/
#include <bits/stdc++.h>
using namespace std;
int main()
{
  //freopen("input.txt" , "r" , stdin);
  //freopen("output.txt" , "w" ,  stdout);
  int c=1;
  string a , b;
  while(getline(cin , a) && a!="#")
  {
    getline(cin , b);
    string ta=" " , tb=" ";
    ta+=a , tb+=b;
    a=ta , b=tb;

    int dp[101][101];
    // bacse case
    for(int i=0; i<101; i++)
    dp[0][i]=0;  //base row
    for(int i=0; i<101; i++)
    dp[i][0]=0; // base col

    // build the table
    for(int j=1; j<a.size(); j++)  // hold b   (col)
    {
      for(int i=1; i<b.size(); i++) // go throw b by a (row)
      {
        if(a[j]==b[i])  // match
        {
          dp[i][j]=1+dp[i-1][j-1]; // previous cell(prefix substing )
        }
        else
        {
          dp[i][j]=max(dp[i-1][j] , dp[i][j-1]);
        }
      }
    }
    int ans=dp[b.size()-1][a.size()-1];
    cout<<"Case #"<<c++<<": you can visit at most "<<ans<<" cities."<< endl;
  }
  return 0;
}
