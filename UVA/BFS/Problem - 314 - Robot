#include <bits/stdc++.h>
using namespace std;
int m , n , g[1005][1005]; // row  , col
int sx , sy , dx , dy;
int dis[1005][1005][4];  // coming to this this cell from that orientation differ alot from coming with another orientation
//bool vis[1005][1005][4];
int o;  // my current orientation
// N=Up , e=right , s=down , w=left
int xd[]={-1 , 0 , 1 , 0};  // row
int yd[]={0 , 1 , 0 , -1};  //  col
struct node
{
    int x , y , o;
    node(){}
    node(int xx , int yy , int oo)
    {
        x=xx;
        y=yy;
        o=oo;
    }
};

queue<node> q;
// inside the grid
bool valid2(int x , int y)
{
    if(x>=0 && x<m && y>=0 && y<n)
        return 1;
    return 0;
}
// empty space
bool valid1(int x , int y)
{
    // check for empty square
    if(valid2(x , y) && g[x][y]==0 && valid2(x-1 , y) && g[x-1][y]==0 && valid2(x-1 , y-1) && g[x-1][y-1]==0 && valid2(x , y-1) && g[x][y-1]==0)
        return 1;
    return 0;
}
int fix(int d)
{
    return (d+4)%4;  // handle -ve
}
void mov(int x , int y , int to , int oto , int  cost)
{
    int nx , ny;
    for(int i=1; i<=3; i++)
    {
        nx=x+(xd[to]*i) , ny=y+(yd[to]*i);
        if(valid1(nx , ny)){  // change 1
        if(dis[nx][ny][to]>dis[x][y][oto]+cost) // on ->> 0-1 bfs , dis represent being visited or not also
        {
            dis[nx][ny][to]=dis[x][y][oto]+cost;
            q.push(node(nx , ny , to));
        }
        }
        else break; // cuz we have to pass by theses un valid cells.
    }
}
void bfs(int x , int y) // row , col
{
    dis[x][y][0]=0;
    dis[x][y][1]=0;
    dis[x][y][2]=0;
    dis[x][y][3]=0;

    q.push(node(x , y , o));
    while(!q.empty())
    {
        x=q.front().x;
        y=q.front().y;
        o=q.front().o;
        int oto=o;

        q.pop(); // delete
        // breadth throw all it's possible childes in efficient way , go and stand in this intersection
        // move as you are
        mov(x , y , o , oto , 1);
        // move 1 right
        o=fix(o+1);
        mov(x , y , o , oto , 2);
        o=fix(o-1); // original

        // move 1 left
        o=fix(o-1);
        mov(x , y , o , oto , 2);
        o=fix(o+1); //  original

        // it's a desired move also  why we can't achieve it from another sub moves ????????
        // move 2 right , or 2 left  , both equal
        o=fix(o+2);
        mov(x , y , o , oto , 3);  // 3 cuz we have 3 commands 2 turn and 1 go
        // no need for original
    }
    return ;
}
int main()
{
    //freopen("input.txt" , "r" , stdin);
    //freopen("output.txt" , "w" , stdout);
    while(cin>>m>>n && n && m)
    {
        for(int i=0; i<m; i++)
            for(int j=0; j<n; j++){
                cin>>g[i][j];
                dis[i][j][0]=dis[i][j][1]=dis[i][j][2]=dis[i][j][3]=INT_MAX;
            }
        // row , column
        cin>>sx>>sy;
        cin>>dx>>dy;

    string ori;
    cin>>ori;
    if(ori=="north")
        o=0;
    else if(ori=="east")
        o=1;
     else if(ori=="south")
        o=2;
    else if(ori=="west")
        o=3;
        // change 2
    if(valid1(sx , sy) && valid1(dx , dy))
    bfs(sx , sy);  // it have to fit on
    if(valid1(dx , dy))
    {
        int mini=INT_MAX;
        for(int i=0; i<4; i++)
        mini=min(mini , dis[dx][dy][i]);
        if(mini==INT_MAX)
            cout<<-1<< endl;
        else
            cout<<mini<< endl;
        //cout<<"here"<< endl;
    }
    else
        cout<<-1<< endl;
    }
    return 0;
}
