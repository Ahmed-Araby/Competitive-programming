// table method (dp)
#include <bits/stdc++.h>
using namespace std;
#define big 1e7
int main()
{
    //freopen("input.txt" , "r" , stdin);
    //freopen("output.txt" , "w" , stdout);
    int n;
    while(cin>>n)
    {
        int f[255] , w[255] , dp[255][255];
        for(int i=1; i<=n; i++)
            cin>>f[i];
        w[0]=0;
        w[1]=f[1];
        for(int i=2; i<=n; i++)
            w[i]=f[i]+w[i-1];
        // base case
        for(int i=1; i<=n; i++)
            dp[i][i]=0; // root itself  (we count just number of edges not nodes).
        // base case (invalid range)
        for(int i=1; i<=n+1; i++) // n+1 happen in case of n is root and n is end so new range is n+1 , n as s , e
            dp[i][i-1]=0; // in valid case
        // build the table it self walk main diagonal one by one
        for(int j=2; j<=n; j++) // end
        {
            int e=j;
            for(int i=1; i<=(n-j+1); i++ , e++) // start
            {
                dp[i][e]=big;
                for(int r=i;r<=e; r++)  // root
                {
                    dp[i][e]=min(dp[i][e] , dp[i][r-1]+dp[r+1][e]+w[e]-w[i-1]-f[r]);
                }
            }
        }
        cout<<dp[1][n]<< endl;
    }
}
