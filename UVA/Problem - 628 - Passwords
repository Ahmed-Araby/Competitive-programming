#include<bits/stdc++.h>
using namespace std;
int n , m;
vector<string> dis , rule;
string res;
// backtracking
void solve(int go , int f)  // walk format by format
{
    // base case
    if(go==rule[f].size())
    {
        cout<<res<< endl;
        return ;
    }
    // recursive case
    if(rule[f][go]=='#')  // pick a word
    {
        for(int i=0; i<dis.size(); i++)
        {
            res+=dis[i];  // do
            solve(go+1 , f);
            res.resize(res.size()-dis[i].size());  // backtrack    undo
        }
    }
    else if(rule[f][go]=='0')
    {
        for(char i='0'; i<='9'; i++)
        {
            res+=i;  // do
            solve(go+1 , f);
            res.pop_back();  // back track   undo
        }
    }
    return ;
}
int main()
{
    while(cin>>n)
    {
        string tmp;
        for(int i=0; i<n; i++)  // take the words
        {
            cin>>tmp;
            dis.push_back(tmp);
        }
        cin>>m;
        for(int i=0; i<m; i++)  // take the format
        {
            cin>>tmp;
            rule.push_back(tmp);
        }
        cout<<"--"<<"\n";
        for(int j=0; j<m; j++)
        {
            solve(0 , j);
            res.erase();
        }
        dis.clear();
        rule.clear();
    }
    return 0;
}
