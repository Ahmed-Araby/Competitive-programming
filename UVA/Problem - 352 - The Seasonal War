    // graph (dfs) we could imagine the peoblem as node of 1`s connected and some are disconnected and we want to count the  number of connected components in the graph(graid)
    #include <bits/stdc++.h>
    using namespace std;
    bool v[26][26];
    int n;
    void dfs(int y , int x , vector<string> &g)
    {
        if(y>=0 && y<n && x>=0 && x<n && g[y][x]=='1' && !v[y][x]){
        v[y][x]=1;
        dfs(y-1 , x , g);  // up
        dfs(y+1 , x , g);  // down
        dfs(y , x+1 , g);  // right
        dfs(y , x-1 , g);  // left
        dfs(y+1 , x+1 , g);  // down main diagonal
        dfs(y+1 , x-1 , g);  // down off diagonal
        dfs(y-1 , x+1 , g);  // up off diagonal
        dfs(y-1 , x-1 , g);  // up main diagonal
        // v[y][x]=0;  // what is the wrong that it do to  the mark process
        }
        return ;
    }
    int main()
    {
        int c=1;
        while(cin>>n)
        {
            int counter=0;
            vector<string>g;
            for(int i=0; i<n; i++){
                string tmp;
                cin>>tmp;
                g.push_back(tmp);
                }
            //  cout<<g[0][0]<< endl;
            for(int i=0; i<n; i++)
            for(int j=0; j<n; j++)
                if(g[i][j]=='1' && !v[i][j]){
                    dfs(i , j , g);
                    counter++;
                }
            cout<<"Image number "<<c<<" contains "<<counter<<" war eagles."<< endl;
            for(int i=0; i<n; i++)
                for(int j=0; j<n; j++)
                v[i][j]=0;
            c++;
        }
        return 0;
    }
