#include <bits/stdc++.h>
using namespace std;
vector<vector<int> >g(10005);
bool v[10005];
bool cyclic(int node , int dad)
{
    for(int i=0; i<g[node].size(); i++)
    {
        int child=g[node][i];
        cout<<child<< endl;
        if(v[child]){
            if(child==dad)
                continue;
            return 1;
        }
        else{
            v[child]=1;
            if(cyclic(child , node))
            return 1;
        }
    }
    return 0;
}
int main()
{
    int n , m;
    cin>>n>>m;
    for(int i=0; i<m; i++){
        int u , v;
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    if(cyclic(1 , -1)){  //  child , parent
        cout<<"NO"<< endl;
        return 0;
    }
    cout<< endl;
    cout<<v[1]<< endl;
    for(int i=1; i<=n; i++)
    if(!v[i]){cout<<"NO"<< endl; return 0;}
    cout<<"YES"<< endl;
    return 0;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include <bits/stdc++.h>
using namespace std;
vector<vector<int> >g(10005);
bool v[10005];
void dfs(int s)
{
    if(!v[s])
    {
        v[s]=1;
        for(int i=0; i<g[s].size(); i++){
            int child=g[s][i];
            dfs(child);
        }
    }
    return ;
}
int main()
{
    int n , m;
    cin>>n>>m;
    if(m!=n-1){
        cout<<"NO"<< endl;
        return 0;
    }
    else {
    for(int i=0; i<m; i++)
    {
        int u , v;
        cin>>u>>v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    dfs(1);
    for(int i=1; i<=n; i++)
    if(!v[i]){cout<<"NO"<< endl; return 0;}
    }
    cout<<"YES"<< endl;
    return 0;
}
