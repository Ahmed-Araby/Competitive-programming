// why that case considered like that
/* test
* 1 3
* II*
* my comment that they will block each other and not affect the free one cuz he don`t want to move in both directions
but the out put is like that
BBB
 DOES THEY assume that this gear will be blocked if any other try to blocked him 
*/

#include <bits/stdc++.h>
using namespace std;
int r , c;
char g[105][105];
bool v[105][105];
int yd[]={-1 , 1 , 0 , 0 , -1 , 1};  // up , down , left , right , off up , off down
int xd[]={0 , 0 , -1 , 1 , 1 , -1};
bool valid(int y , int x)
{
    return (y>=0 && y<r && x>=0 && x<c && g[y][x]!='.');
}
void bfs(int y , int x)
{
    queue<pair<int , int> > q;
    q.push({y , x});
    while(!q.empty())
    {
        y=q.front().first;
        x=q.front().second;
        q.pop();
        //cout<<"good"<< endl;
        // the whole idea if we blocked some one we have to put  him back in the queue to update all it`s child and block them and not to use the visited array on child
        // or we can use it so if it`s not visited so operate on it normally if it`s visited look to our situation if we good don`t push in the queue is we block each other or I block you push into the queue
        for(int i=0; i<6; i++)
        {
            //cout<<"in"<< endl;
            int ny , nx;
            ny=y+yd[i];
            nx=x+xd[i];
            if(valid(ny , nx))
            {
                if(g[y][x]=='B' && g[ny][nx]!='B'){  // bug here cux of the absence of the second condition
                    //cout<<"bad"<< endl;
                    g[ny][nx]='B';
                    q.push({ny , nx});
                    v[ny][nx]=0;
                }
                else if(g[ny][nx]==g[y][x] && g[ny][nx]!='B'){  // bug here cuz of the absence of the second condition
                    //cout<<"block"<< endl;
                    g[ny][nx]='B'; // blocked and block my dad
                    q.push({ny , nx});
                    v[ny][nx]=0;
                }
                else if(g[ny][nx]!=g[y][x] && g[ny][nx]=='F'){
                    if(g[y][x]=='(')
                        g[ny][nx]=')';
                    else if(g[y][x]==')')
                        g[ny][nx]='(';
                    q.push({ny , nx});
                }
                // else is that we both move and no one block the other
            }
        }
    }
}
int main()
{
    while(cin>>r>>c && r && c)
    {
        for(int i=0; i<r; i++)
            for(int j=0; j<c; j++){
                cin>>g[i][j];
                if(g[i][j]=='*') g[i][j]='F';
                else if(g[i][j]=='I')
                    {g[i][j]='('; v[i][j]=1;}
            }
        for(int i=0; i<r; i++)  // to operate on the disconnected components
            for(int j=0; j<c; j++)
            if(v[i][j]==1){
                bfs(i , j);
                v[i][j]=0;
            }
        cout<< endl;
        for(int i=0; i<r; i++){
            for(int j=0; j<c; j++)
            cout<<g[i][j];
            cout<< endl;
        }
    }
    return 0;
}
