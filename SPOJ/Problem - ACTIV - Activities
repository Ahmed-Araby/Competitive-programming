/*
topic : dynamic programing 
scheduling algorithms 
*/
#include <bits/stdc++.h>
using namespace std;
#define pi pair<int , int>
#define ll long long
#define mod 100000000 // that is the meaning of print just the last 8 numbers is taking the mod
bool so(pi x , pi y)
{
/*
sort by the end time
that enable last class in the subset
talk for all the subset
*/
  return x.second<y.second;
}
int main()
{
  int n;
  while(cin>>n && n!=-1)
  {
    vector<pi> ts;
    for(int i=0; i<n; i++)
    {
      int s , e;
      cin>>s>>e;
      ts.push_back({s , e});
    }
    sort(ts.begin() , ts.end() , so);

    /*for(int i=0; i<ts.size(); i++)
        cout<<ts[i].first<<" "<<ts[i].second<< endl;*/

    // apply dp approach
    /*
     0 mean not including our current task
     1 mean including our task
    */
    int dp[n+5][2];
    memset(dp , sizeof(int)*(n+5)*2 , 0);
    /*
    store end times of the proceed classes
    to binary search them and decide from here I will bind my self
    */
    vector<int>et;
    // base case first task ever
    dp[0][0]=0;
    dp[0][1]=1;
    et.push_back(ts[0].second); // end time
    // start from the second task
    for(int i=1; i<n; i++)
    {
      // not included [i][0] just take what before you
      dp[i][0]=(dp[i-1][0]+dp[i-1][1])%mod; // all what happen before me
      // include [i][q]
      // case 1
      /*
      last ont talk for all
      if he is greater so they are all greater
      it means it intersect with them
      at all and it will have just itself
      */
      if(ts[i].first<et[0])
      dp[i][1]=1; // just your self
      else
      {
        // bring the last one that I can cope with using binary search as we have sorted all the endtimes before
        int index=upper_bound(et.begin() , et.end() , ts[i].first)-et.begin(); // give me the number of elements in this interval
        index--; // get the index of the last element in this range
        // deal with him (dp at index )
        dp[i][1]=(1+dp[index][0]+dp[index][1])%mod; // put my self in all what happen before me and add me
      }
      et.push_back(ts[i].second);
    }
    int res=(dp[n-1][0]+dp[n-1][1])%mod;
    deque<int> d;
    while(res){
        d.push_front(res%10);
        res/=10;
    }
    for(int i=0; i<8-d.size(); i++)
        cout<<0;
    for(int i=0; i<d.size(); i++)
        cout<<d[i];
    cout<< endl;
  }
  return 0;
}
