// back track solution and I think It could be solved using bitwise operation 
#include <bits/stdc++.h>
using namespace std;
int seq[30]={0} , maxi=0 , n;
void solve(int i , int prv , int no)
{
    maxi=max(maxi , no);
    // base case
    if(i==n)
        return ;
    // recursive case
    if(prv<seq[i])
    solve(i+1 , seq[i] , no+1);  // take
    solve(i+1 , prv , no); // leave
    return ;
}
int main()
{
    cin>>n;
    for(int i=0; i<n; i++)
        cin>>seq[i];
    solve(0 , 0 , 0);
    cout<<maxi<< endl;
    return 0;
}
// back track solution using Dynamic Programing 
// here we save by what we are coming and where we are the number  what we are coming with his importance appear in that
//it may give me the ability to be taken or not so I would have myltiple perfect cases
//depend on what is the number I have as prv when I Come to this pos 
// but whew does the repeation happen here does it happen just when we have repeated numbers (numbers with the same values)?????????
#include <bits/stdc++.h>
using namespace std;
int n , seq[30] , memo[50][50]; // dp matrix will store the prv I come With and my index cuz some prv may force me
int solve(int i=0 , int prv=0)
{
    // base case
    if(i==n)
        return 0;
    // dp case
    if(memo[prv][i]!=-1)  // mean that I have the best solution of being in pos i form before
        return memo[prv][i];  // best res from both take and leave
    // recursive case
    int take=0 , leave=0;
    if(seq[i]>prv)
        take=1+solve(i+1 , seq[i]);  // take ( me + what comes next )  it split the problem into small problem
    leave=solve(i+1 , prv);  // leave
    return memo[prv][i]=max(take , leave);    // dp saving
}
int main()
{
    cin>>n;
    for(int i=0; i<n; i++)
        cin>>seq[i];
    for(int i=0; i<50; i++)
    for(int j=0; j<50; j++)
        memo[i][j]=-1;
    cout<<solve()<< endl;
    return 0;
}
